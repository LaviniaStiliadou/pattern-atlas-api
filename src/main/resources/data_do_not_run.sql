INSERT INTO public.pattern_language (id, name, uri, graph, logo) VALUES ('6f6a891f-df78-49b6-83cb-2b95c535e1b1', 'Quantum Algorithm Patterns', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns', '[{"x": 634.527023669844, "y": 317.89499219070217, "id": "8bca3490-a040-4d74-84d5-8a3da9a4232f", "vx": 0.03680751673271294, "vy": 0.007728038500160988, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/oracle", "type": "default", "index": 0, "title": "Oracle"}, {"x": 876.3614714751461, "y": 313.73611696743893, "id": "d9608d44-a64d-4c16-a338-aa0b2e17bb6e", "vx": 10.35853568556058, "vy": -5.963396765798682, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/uniformSuperposition", "type": "default", "index": 1, "title": "Uniform Superposition"}, {"x": 728.6939593820944, "y": 253.11604649332358, "id": "30ac5c81-1f9a-499b-b5a3-97f0a236e882", "vx": 10.169004054400817, "vy": -4.76059088938299, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/uncompute", "type": "default", "index": 2, "title": "Uncompute"}, {"x": 865.5856587360386, "y": 166.0393014923956, "id": "3aa1d4fe-cc68-4703-b9c1-999b3943f96d", "vx": 9.04278873158754, "vy": -5.968497789421648, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/creatingEntanglement", "type": "default", "index": 3, "title": "Creating Entanglement"}, {"x": 735.7165162756228, "y": 91.00080463662508, "id": "8b644617-9026-4ef4-afe3-01c8959937e9", "vx": 8.207359463558946, "vy": -4.542771934929312, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/functionTable", "type": "default", "index": 4, "title": "Function Table"}, {"x": 552.7135291917972, "y": 186.5611842313279, "id": "c846f2f2-0913-4efc-8e86-583b68f4bc29", "vx": 0.01584482777466611, "vy": -0.016874378599790005, "uri": "https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/initialization", "type": "default", "index": 5, "title": "Initialization"}]', null);
INSERT INTO public.pattern_language (id, name, uri, graph, logo) VALUES ('54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f', 'Cloud Computing Patterns', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns', null, 'https://www.cloudcomputingpatterns.org/img/book.png');
INSERT INTO public.pattern_schema (pattern_language_id) VALUES ('6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_schema (pattern_language_id) VALUES ('54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (1, 'Known Uses', 'Known Uses', 6, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (2, 'Next', 'Next', 7, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (3, 'Context', 'Context', 4, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (4, 'Alias', 'Alias', 0, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (5, 'Driving Question', 'Driving Question', 3, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (6, 'Intend', 'Intend', 2, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (7, 'Solution', 'Solution', 5, 'any', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (8, 'Intend', 'Intend', 0, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (9, 'Icon', 'Icon', 1, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (10, 'Driving Question', 'Driving Question', 2, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (11, 'Context', 'Context', 3, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (12, 'Solution', 'Solution', 4, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern_section_schema (id, label, name, position, type, pattern_schema_pattern_language_id) VALUES (13, 'Solution Sketch', 'Solution Sketch', 5, 'any', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('8bca3490-a040-4d74-84d5-8a3da9a4232f', 'Oracle', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/oracle', '{"Next": "An oracle often requires to uncompute its result state, and assumes a properly\nprepared register as input (*initialization*).", "Alias": "Black Box", "Intend": "Quantum algorithms often need to compute values of a function f without\nhaving to know the details how such values are computed.", "Context": "Divide-and-Conquer is a well-established method in computer science to\nsimplify the solution of complex problems. The concept of an oracle (or black box) as\na granule of reuse with hidden internals supports this method for building quantum\nalgorithms.", "Solution": "Oracles are used in problem specific manners. [14] discusses various kinds\nof oracles. Limitations of using oracles are discussed in [26].", "Known Uses": "The algorithms of Deutsch, Deutsch-Jozsa, Bernstein-Vazirani, Simon,\nGrover and others make use of oracles. See [20] for further usages.", "Driving Question": "How can the computation of another quantum algorithm be reused?"}', 'assets/pattern_icons/oracle.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('45051367-75ca-4904-98e9-a2248e144092', 'Phase Shift', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/phaseShift', '{"Next": "A function table based on an indicator function is a phase shift, with G as the\nset of base vectors qualifying under the indicator function. An amplitude\namplification makes use of two phase shifts. A phase shift is used as an oracle.", "Alias": "", "Intend": "In a given register certain qbits should be emphasized.", "Context": "When an algorithm is applied iteratively, and each iteration is assumed to\nimprove the solution, those parts of the solution that did improve should be indicated.\nA phase shift can be such an indication.", "Solution": "The following operator $S^\\varphi_G$ can be efficiently implemented (see [24]) in\nterms of number of gates used:\n$$\\sum_{x=0}^{N-1}a_x|x\\rangle \\mapsto \\sum_{x \\in G} a_x |x \\rangle + \\sum_{x \\notin G} a_x | x \\rangle$$\nThis operator shifts the qbits in $G \\subseteq \\{0, \\ldots , N-1\\}$ (the qbits improved: „good set“) by $\\varphi$ and leaves the other qbits unchanged. There is even a variant of the operator\nthat shifts the phases of the qbits in the good set by different values, i.e.\nphase $\\varphi = \\varphi(x)$", "Known Uses": "The algorithms of Grover, Deutsch-Jozsa etc. use a phase shift.", "Driving Question": "How can important aspects of a state been efficiently distinguished?"}', 'assets/pattern_icons/phase_shift.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('b3663ab8-bf20-435e-9572-ac7e6ea85ba0', 'Uncompute', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/uncompute(akaUnentanglingAkaCopy-uncompute)', '{"Next": "An oracle often produces a state that is an entanglement between the\ncomputational basis and some temporary qbits, thus requires uncompute. A function\ntable may be seen as a special case of an oracle.", "Alias": " Unentangling, Copy-Uncompute", "Intend": "Often, entanglement of the computational basis of a quantum register with\ntemporary qbits (ancilla, workspace) has to be removed to allow proper continuation\nof an algorithm.", "Context": "A computation often needs temporary qbits, and at the end of the\ncomputation these qbits are entangled with the computational basis. This hinders\naccess to the actual result of the computation, especially if the computation was used\njust as an intermediate step within an algorithm.\nFor example, if the computation should produce $\\sum \\alpha_i | \\varphi_i \\rangle$ but in fact it produces $\\sum \\alpha_i \\varphi_i \\rangle | \\psi_i \\rangle$, the temporary qbits $| \\psi_i \\rangle$ can not be simply eliminated unless\n$$ \\sum \\alpha_i \\varphi_i \\rangle | \\psi_i \\rangle = (\\sum \\alpha_i | \\varphi \\rangle)\\otimes \\psi_i \\rangle,$$\ni.e. unless the computational basis and the temporary qbits are separable.", "Solution": "Most algorithms map |x>|0> |0> to |x>|g(x)>|f(x)> to compute a function f\n[8]. I.e. the second qbits represent a workspace that contains garbage g(x) at the end\nof the computation. This garbage has to be set to |0> to allow for proper continuation,\nespecially if future parts of the algorithm expects the workspace to be initialized again\nby |0>.\nMore precisely, assume the computation $U_f$ resulted in\n$$|x\\rangle|0\\rangle|0\\rangle \\mapsto \\sum_y a_y |x\\rangle|y\\rangle |f(x)\\rangle,$$\ni.e. the garbagde state is $|g(x)\\rangle = \\sum_<a_y|y\\rangle$.  Now, a fourth register initialized to |0> is\nadded, and CNOT is applied (bitwise) to this fourth register controlled by the third\nregister: this copies f(x) to the fourth register and $\\sum_y a_y |x\\rangle y\\rangle f(x)\\rangle|f(x)\\rangle$ results. Next, $U_f^{-1}$ is applied to the first three registers, giving |x>|0>|0>|f(x)>. Then, SWAP is\napplied to the last two registers leaving |x>|0>|f(x)>|0>. This now allows to discard\nthe last register leaving |x>|0>|f(x)> as wanted (more details in [8]). [23] discusses\nhow to use uncompute in several situations.", "Known Uses": "Deutsch-Joza, the HHL algorithm [15], quantum walks, realizations of\nclassical circuits as quantum algorithms etc make use of uncompute.", "Driving Question": "How can entanglement be removed that resulted from a computation?"}', 'assets/pattern_icons/uncompute.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('63940a7b-fa03-4f4c-8a21-e891825ad2c8', 'Amplitude Amplification', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/amplitudeAmplification', '{"Next": "Part of the unitary operation $Q$ is the *function table* $S_G^\\pi$ , which is also a special\ncase of a phase shift. Amplitude amplifications are used as oracles.", "Alias": "", "Intend": "Enter your input for this section here.", "Context": "The function table of an indicator function f may list all solutions of a\nproblem (i.e. $f(x) = 1 \\Leftrightarrow x$ solves the problem). By measuring the corresponding state,\na solution is found with a certain probability. But measuring destroys the state, i.e. if a\nsolution is not received by measurement, the computation has to be performed again\nto support another new measurement.\nThus, a mechanism is wanted that doesn’t need measurements and that allows to\ncontinue with the state achieved in case a solution is not found.", "Solution": "State is transformed in such a way that values of interest get a modified\namplitude such that they get a higher probability of being measured after a couple of\niterations [4].\nThe phase shift $S^\\pi_G$ changes the sign of the phase of elements in $G$, the phase shift $S^\\pi_0$ changes the sign of $|0\\rangle$ (the start value of the iteration) and leaves the other\nelements unchanged. Let U be the algorithm for computing approximate solutions\n(not using any measurements). Define the following is unitary operation:\n$$Q = - US_0^\\pi U^{-1}S^\\pi_G$$\nIf U is an algorithm that succeeds with a solution with probability t, 1/t iterations are\nrequired on the average to find a solution. U$|0\\rangle$ is assumed to have a non-zero amplitude in G, otherwise no speedup can be achieved. If U has this property, Q will\nproduce a solution within $O(\\sqrt{1/t})$ iterations - which is a quadratic speedup. The\nnumber of iterations to be performed with Q is about\n$$\\frac{\\pi}{4} \\cdot \\frac{1}{|P_GU|O\\rangle|}$$\nwhere $P_G$ is the projection onto the subspace spanned by $G$.", "Known Uses": "The algorithms of Grover and Simons, for example, make use of\namplitude amplification. Also, the HHL algorithm for solving linear equations [15]\nuses this pattern. The state preparation algorithm of [25] uses amplitude amplification\ntoo. [4] discusses more algorithms making use of it.", "Driving Question": "How can the probability of finding a solution be increased?"}', 'assets/pattern_icons/amplitude_amplification.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('00e66829-b566-49a7-a38d-b945bce48f84', 'Quantum-Classic Split', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/quantum-classicSplit', '{"Next": "Data is passed from the classical part of the solution to the quantum part by\nproper initialization.", "Alias": "", "Intend": "The solution of a problem is often not achieved by only using a quantum\ncomputer. Thus, the solution is performed partially on a classical computer and\npartially on a quantum computer, and both parts of the solution interact.", "Context": "Some quantum algorithms inherently require pre- or post-processing on a\nclassical device, resulting in a split of the solution into a classical part and a quantum\npart.\nAlso, if a quantum computer has a low number of qubits or its gates are noisy, a\nsolution of a problem may have to be separated into a part executed on a quantum\ncomputer and a part executed on a classical computer [22].", "Solution": "The sheer fact that a split of the algorithms may be done is important. How\nsuch a split is applied is problem dependent.", "Known Uses": "Shor''s algorithm or Simon’s algorithm inherently make use of classical\npost-processing. The algorithm in [11] to solve combinatorial optimization problems\nuses classical pre-processing. The algorithm of [2] uses a split into a quantum part of\nthe solution and a classical part to enable factorization on NISQ devices.", "Driving Question": "How can a solution be split between a quantum computer and a\nclassical computer?"}', 'assets/pattern_icons/quantum_classic_split.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('c846f2f2-0913-4efc-8e86-583b68f4bc29', 'Initialization', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/initialization', '{"Next": "Often, after initialization the register must be brought into a state of uniform\nsuperposition. Function tables require the initializations discussed here. An initialized\nregister may become input to an oracle.", "Alias": "State Preparation", "Intend": "At the beginning of a quantum algorithm, the quantum register manipulated\nby the algorithm must be initialized. The initialization must be as easy as possible,\nconsidering requirements of the steps of the algorithm.", "Context": "An algorithm typically requires input representing the parameters of the\nproblem to be solved. Most quantum algorithms encode this input as part of the\nunitary transformations making up the quantum algorithm. E.g. if the overall\nalgorithm is $U=U_n \\cdot \\ldots \\cdot U_i \\cdot U_{i-1} \\cdot \\ldots \\cdot U1$, then $U_1, \\ldots , U_{i-1}$ are operators that furnish the\nregister to hold the parameters of the problem solved by the following operators $U_i,\\ldots,U_n$. However, the initial state operated on by $U_{i-1} \\cdot \\ldots \\cdot U_1$ must be set; $U_{i-1} \\cdot \\ldots \\cdot U_1$ is\ncalled state preparation [25].", "Solution": "Often, the register will be initialized as the unit vector |0…0>. This\nregister may have certain ancilla bits or workspace bits distinguished that are used to\nstore intermediate results, to control the processing of the algorithm etc..\nFor example, the register is initialized with $|0\\rangle^{\\bigotimes n} |0\\rangle^{\\bigotimes m}$ (where the second part of\nthe register consists of workspace bits) in order to compute the function table of the\nBoolean function $f : {\\{0,1\\}}^n \\mapsto {\\{0,1\\}}^m$.\nAn initialization with $|0\\rangle^{\\bigotimes n} |1\\rangle^{\\bigotimes m}$ supports to reveal membership in a set which is\ndefined based on an indicator function (used to solve decision problems, for example)\nby changing the sign of the qbits representing members of this set.\nBased on these simple initializations, more advanced states can be prepared. For\nexample, [7] discusses several algorithms to load classical bits into a quantum\nregister. [25] presents how to load a complex vector, [8] how to load a real vector\nbased on corresponding data structures; thus, a matrix can be loaded as a set of\nvectors [18].", "Known Uses": "All algorithms must be initialized somehow.", "Driving Question": "How can the input of a quantum register be initialized in a straightforward\nmanner, considering immediate requirements of the following steps of the quantum algorithm?"}', 'assets/pattern_icons/initialization.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('1ab2404a-89ed-42f8-a666-02962a864ee9', 'Speedup via Verifying', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/speedupViaVerifying', '{"Next": "The verification is performed as an oracle.", "Alias": "", "Intend": "Verifying whether a claimed solution is correct or not is sometimes simple.\nSuch verifications may then be used to speedup solving a corresponding problem.", "Context": "Often, it is hard to find a solution of a problem, but verifying whether a\nclaimed solution is correct is simple. For example, factorizing a number is hard, but\nmultiplying numbers is simple. Thus, when a given list of prime numbers is claimed\nto be the factorization of a certain number, multiplying the prime numbers and\ncomparing the result with the certain number is a simple way of verification.", "Solution": "Solving certain problems can be speedup by first listing all possible\nsolutions, then scanning through the list and verifying whether the current member of\nthe list at hand is a solution or not.\nThe verification of the possible solutions is done via an oracle. Scanning is done by\nmeans of the Grover algorithm, thus,$O(\\sqrt{n})$ invocations of the Oracle function\ndetermines the solution. A prerequisite of this pattern is that solutions can be detected\nby means of oracle.", "Known Uses": "Cracking keys, finding Hamiltonian cycles, solving 3-SAT, the Traveling\nSalesman Problem etc can be approached this way.", "Driving Question": "How can a speedup be achieved when verifying a solution is simple?"}', 'assets/pattern_icons/speedup_via_verifaction.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('d9608d44-a64d-4c16-a338-aa0b2e17bb6e', 'Uniform Superposition', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/uniformSuperposition', '{"Next": "Creating uniform superposition makes use of initialization. A register in uniform superposition may be entangled. A register in uniform superposition may be input to an oracle.", "Alias": "", "Intend": "Typically, the individual qbits of a quantum register have to be in multiple states at the same time without preferring any at these states at the beginning of the computation.", "Context": "One origin of the power of quantum algorithms stems from quantum parallelism, i.e. the ability of a quantum register to represent multiple values at the same time. This is achieved by bringing (a subset of) the qbits of a quantum register into superposition. Many algorithms assume that at the beginning this superposition is uniform, i.e. the probability of measuring any of the qbits is the same.", "Solution": "Uniform superposition is achieved by initializing the quantum register as the unit vector $|0...0\\rangle$ and applying the Hadamard tranformation afterwards:  \n$$H^{\\bigotimes n}(|0\\rangle^{n})=\\frac{1}{\\sqrt{2^n}}\\sum_ {x=0}^{2^n-1}|x\\rangle$$\nIn case the quantum register includes ancilla bits or workspace bits in addition to the computational basis, the computational basis is brought into superposition as described. The other bits may be brought into superposition themselves or not. This is achieved by using a tensor product $H^{\\bigotimes n}\\bigotimes U$, where $H^{\\bigotimes n}$ operates on the computational basis and $U$ operates on the other bits (e.g., $U=I$ in case the other bits are not brought into superposition).", "Known Uses": "Most algorithms make use of uniform superposition", "Driving Question": "How can an equally weighted superposition of all possible states of the qbits of a quantum register be created?"}', 'assets/pattern_icons/superposition.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('8b644617-9026-4ef4-afe3-01c8959937e9', 'Function Table', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/functionTable', '{"Next": "Function tables require initialization discussed before. Uniform superposition\nof the computational basis is established before the function table is computed.\nAmplitude amplification is a generalization of function tables. The computation is\nperformed by an oracle. Often, uncompute is required to continue processing.", "Alias": "", "Intend": "Some problems can be reduced to determining global properties of a\nfunction. For that purpose, the corresponding function table should be computed\nefficiently and made available for further analysis.", "Context": "In order to compute the function table of a function\n$f : {\\{0,1\\}}^n \\mapsto {\\{0,1\\}}^m$ ,\na classical algorithm requires to invoke the function for each value of the domain.\nQuantum parallelism allows to compute the values of such a finite Boolean function\nas a whole in a single step. This can be used to speedup finding global properties of\nthe corresponding function. Note, that in case m=1 the Boolean function is often an\nindicator function used to determine solutions of a decision problem.", "Solution": "The quantum register is split into the computational basis (the domain of\nthe function f) consisting of n qbits x, and a workspace consisting of m qbits y, which\nis used to hold the values of f. Based on this, the unitary operator\n$$U_f |x,y\\rangle = |x,y \\oplus f(x)\\rangle$$\nis defined.\nAfter initializing the register with $|0\\rangle^{\\oplus n}|0\\rangle^{\\oplus m}$, the computational basis is brought\ninto uniform superposition via $H^{\\otimes n}$ leaving the workspace unchanged, and then the\noperator $U_f$ is applied only once resulting in the function table:\n$$|O \\rangle^{\\otimes n}|O \\rangle^{\\otimes m} \\mapsto(\\frac{1}{\\sqrt{2^n}} \\sum_x |x\\rangle)\\otimes|0\\rangle^{\\otimes m} \\mapsto \\frac{1}{\\sqrt{2^n}} \\sum_x |x\\rangle | f(x) \\rangle$$\nIn case of an indicator function f (e.g. if f is representing a decision problem), the\nregister is initialized with $|0\\rangle^{\\oplus n}|1\\rangle.$ Uniform superposition of the complete register is\nfurnished by $H^{\\otimes n +1}$. Applying $U_f$ finally results in\n$$|O \\rangle^{\\otimes n}|1\\rangle \\mapsto(\\frac{1}{\\sqrt{2^n}} \\sum_x |x\\rangle) \\otimes|-\\rangle \\mapsto (\\frac{1}{\\sqrt{2^n}} \\sum_x^{2^n-1} (-1)^{f(x)} |x \\rangle) \\otimes | -\\rangle$$\nThus, members of the computational basis indicate by their sign whether they are\ndetected by the indicator function (minus sign) or not (plus sign) - aka „phase\nkickback“.", "Known Uses": "The algorithms of Deutsch, Deutsch-Jozsa, Grover, Shor and others\nmake use of function tables.", "Driving Question": "How can a function table of a finite Boolean function be computed?"}', 'assets/pattern_icons/function-table.PNG', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('52d83912-c6d9-4169-938f-b625d07f22af', 'Infrastructure as a Service (IaaS)', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/infrastructureAsAService(iaas)', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/infrastructure_as_a_service_icon.png)", "Intend": "Providers share physical and virtual hardware IT resources between customers to enable self-service, rapid elasticity, and pay-per-use pricing.", "Context": "In the scope of [Periodic Workloads](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FperiodicWorkload) with reoccurring peaks and the special case of [Once-in-a-lifetime Workloads](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252Fonce-in-a-lifetimeWorkload) with one dramatic increase in workload, IT resources have to be provisioned flexibly.", "Solution": "A provider offers physical and virtual hardware, such as servers, storage and networking infrastructure that can be provisioned and decommissioned quickly through a self-service interface.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/infrastructure_as_a_service_sketch.png)", "Driving Question": "How can different customers share a physical hosting environment so that it can be used on-demand with a pay-per-use pricing model?"}', 'http://www.cloudcomputingpatterns.org/icons/infrastructure_as_a_service_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('4ba93991-17fc-4e73-b734-2492a6c3f7a5', 'Exactly-once Delivery', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/exactly-onceDelivery', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/exactly_once_delivery_icon.png)", "Intend": "For many critical systems duplicate messages are inacceptable. The messaging system ensures that each message is delivered exactly once by filtering possible message duplicates automatically.", "Context": "Message duplicity is a very critical design issue for Distributed Applications and or application components that exchange messages via a Message-oriented Middleware.", "Solution": "Upon creation, each message is associated with a unique message identifier. This identifier is used to filter message duplicates during their traversal from sender to receiver.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/exactly_once_delivery_sketch.png)", "Driving Question": "How can it be assured that a message is delivered only exactly once to a receiver?"}', 'http://www.cloudcomputingpatterns.org/icons/exactly_once_delivery_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('aa29bb96-a665-4b27-b7b9-e057d5a59b62', 'Execution Environment', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/executionEnvironment', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/execution_environment_icon.png)", "Intend": "To avoid duplicate implementation of functionality, application components are deployed to a hosting environment providing middleware services as well as often used functionality.", "Context": "Applications often use similar functions, for example, to access networking interfaces, display user interfaces, access storage of the server etc. In this case, each application implements similar components that could be shared with other applications. Sharing such common functionality between applications would also result in a better utilization of the environment.", "Solution": "Common functionality is summarized in an Execution Environment providing functionality in platform libraries to be used in custom application implementations and in the form of the middleware. The environment, thus, executes custom application components and provides common functionality for data storages, communication etc.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/execution_environment_sketch.png)", "Driving Question": "How can multiple application components share a hosting environment efficiently?"}', 'http://www.cloudcomputingpatterns.org/icons/execution_environment_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('d01320e7-0ede-4cca-ae0d-b0b432757b72', 'At-least-once Delivery', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/at-least-onceDelivery', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/at_least_once_delivery_icon.png)", "Intend": "In case of failures that lead to message loss or take too long to recover from, messages are retransmitted to assure they are delivered at least once.", "Context": "Sometimes, message duplicity can be coped with by the application using a Message-oriented Middleware. Therefore, for scenarios where message duplicates are uncritical, it shall still be ensured that messages are received.", "Solution": "For each message retrieved by a receiver an acknowledgement is sent back to the message sender. In case this acknowledgement is not received after a certain time frame, the message is resend.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/at_least_once_delivery_sketch.png)", "Driving Question": "How can communication partners or a Message-oriented Middleware ensure that messages are received successfully?"}', 'http://www.cloudcomputingpatterns.org/icons/at_least_once_delivery_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('49d49983-4b69-4826-8125-85363667bdc4', 'Transaction-based Delivery', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/transaction-basedDelivery', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/transaction_based_delivery_icon.png)", "Intend": "Clients retrieve messages under a transactional context to ensure that messages are received by a handling component.", "Context": "While a Message-oriented Middleware can control traversing messages, it may be necessary to assure that messages are actually received successfully from a message queue by the client.", "Solution": "The Message-oriented Middleware and the client reading a message from a queue participate in a transaction. All operations involved in the reception of a message are, therefore, performed under one transactional context guaranteeing ACID behavior.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/transaction_based_delivery_sketch.png)", "Driving Question": "How can it be ensured that messages are only deleted from a message queue if they have been received successfully?"}', 'http://www.cloudcomputingpatterns.org/icons/transaction_based_delivery_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('02850d67-27d5-45b0-847b-2385a1ad0f6e', 'Static Workload', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/staticWorkload', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/static_workload_icon.png)", "Intend": "IT resources with an equal utilization over time experience Static Workload.", "Context": "Static Workloads are characterized by a more-or-less flat utilization profile over time within certain boundaries.", "Solution": "An application experiencing Static Workload is less likely to benefit from an elastic cloud that offers a pay-per-use billing, because the number of required resources is constant.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/static_workload_sketch.png)", "Driving Question": "How can an equal utilization be characterized and how can applications experiencing this workload benefit from cloud computing?"}', 'http://www.cloudcomputingpatterns.org/icons/static_workload_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('a3dcd4bb-08e1-47a0-9a0c-04340e2312ff', 'Environment-based Availability', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/environment-basedAvailability', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/environment_based_availability_icon.png)", "Intend": "A cloud provider guarantees the availability of the environment hosting individual nodes, such as virtual servers or hosted application components.", "Context": "A cloud provider offers an Elastic Infrastructure or an Elastic Platform on which customers may deploy application components. The availability of this environment has to be expressed so that customers may match their requirements.", "Solution": "The provider assures availability for the provided environment, thus, for the availability of the Elastic Platform or the Elastic Infrastructure as a whole, for example, the availability for at-least-once provisioned component or virtual server and the availability to provision replacements in case of failures is assured. There is no notion of availability for individual application components or virtual servers deployed in this environment.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/environment_based_availability_sketch.png)", "Driving Question": "How can providers express availability in an environmental-centric fashion, so that customers may estimate the availability of hosted applications?"}', 'http://www.cloudcomputingpatterns.org/icons/environment_based_availability_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('5930dae0-4910-4903-a92d-0b1ba3643b78', 'Hypervisor', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/hypervisor', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/hypervisor_icon.png)", "Intend": "To enable the elasticity of clouds, the time required to provision and decommission servers is reduced through hardware virtualization.", "Context": "If multiple applications are deployed on a physical server they may have to consider the other applications in their configuration. For example, if applications require the same network ports, access the same directories in the local file system etc. This sharing of common underlying physical hardware between different applications shall be simplified while also reducing dependencies of the application on the physical server.", "Solution": "A Hypervisor abstracts the hardware of a shared physical server into virtualized hardware. On this virtual hardware, different operating systems and middleware are installed to host applications sharing the physical server while being isolated from each other regarding the use of physical hardware, such as central processing units (CPU), memory, disk storage, and networking.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/hypervisor_sketch.png)", "Driving Question": "How can virtual hardware that has been abstracted from physical hardware be used in applications?"}', 'http://www.cloudcomputingpatterns.org/icons/hypervisor_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('13c85149-7c0a-4b59-b784-efb0a6128a06', 'Elastic Infrastructure', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/elasticInfrastructure', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/elastic_infrastructure_icon.png)", "Intend": "Hosting of virtual servers, disk storage, and configuration of network connectivity is offered via a self-service interface over a network.", "Context": "An application experiences Periodic Workload, Once-in-a-lifetime Workload, Unpredictable Workload, or Continuously Changing Workload, the number of IT resources, such as servers, should be adjusted dynamically. In scope of the IaaS service model, the applications’ runtime infrastructure, thus, must support dynamic provisioning and decommissioning of virtual servers, disk storage and network connectivity.", "Solution": "An Elastic Infrastructure provides preconfigured virtual server images, storage and network connectivity that may be provisioned by customers using a self-service interface. Monitoring information is provided to inform about resource utilization required for traceable billing and automation of management tasks.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/elastic_infrastructure_sketch.png)", "Driving Question": "How do Cloud Offerings providing infrastructure resources behave and how should they be used in applications?"}', 'http://www.cloudcomputingpatterns.org/icons/elastic_infrastructure_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('513075b2-b2ee-4406-9bb0-7c16e8c8ed18', 'Key-Value Storage', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/key-valueStorage', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/key_value_storage_icon.png)", "Intend": "Semi-structured or unstructured data is stored with limited querying support but high-performance, availability, and flexibility.", "Context": "To ensure availability and performance, a data storage offering shall be distributed among different IT resources and locations. Furthermore, changes of requirements or the fact that customers share a storage offering and have different requirements, raises the demand for a flexible data structure. as data structure validation during queries requires high-performance connectivity between distributed resources storing the data elements.", "Solution": "Pairs of identifiers (key) and associated data (value) are stored. No database schema or only a very limited one are supported to enforce a data structure. The expressiveness of queries is reduced significantly in favor of scalability and configurability: semi-structured on unstructured data can be scaled out among many IT resources without the need to access many of them for the evaluation of expressive queries.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/key_value_storage_sketch.png)", "Driving Question": "How can key-value elements be stored to support scale out and an adjustable data structure?"}', 'http://www.cloudcomputingpatterns.org/icons/key_value_storage_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('84ba173c-577b-4f7c-8d81-7d038222f645', 'Hybrid Cloud', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/hybridCloud', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/hybrid_cloud_icon.png)", "Intend": "Different clouds and static data centers are integrated to form a homogeneous hosting environment.", "Context": "A company is likely to use a large set of applications to support its business, which have versatile requirements making different Cloud Deployment Models suitable to host them.", "Solution": "[Private Clouds](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FprivateCloud), [Public Clouds](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FpublicCloud), [Community Clouds](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FcommunityCloud), and static data centers are integrated to deployed applications to the hosting environment best suited for their requirements while interconnection of these environments.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/hybrid_cloud_sketch.png)", "Driving Question": "How can the cloud properties – on demand self-service, broad network access, pay-per-use, resource pooling, and rapid elasticity – be provided across clouds and other environments?"}', 'http://www.cloudcomputingpatterns.org/icons/hybrid_cloud_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('4e42c930-b8b3-4a13-8d2b-e5cfedebb75a', 'Relational Database', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/relationalDatabase', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/relational_database_icon.png)", "Intend": "Data is structured according to a schema that is enforced during data manipulation and enables expressive queries of handled data.", "Context": "Handled data is often comprised of large numbers of similar data elements. These data elements have certain dependencies among each other. If such structured data is queried, clients make certain assumptions about the data structure and the consistency of relations between the retrieved data elements.", "Solution": "Data elements are stored in tables where each column represents an attribute of a data element. Table columns may have dependencies in the way that entries in one table column must also be present in a corresponding column of a different table. These dependencies are enforced during data manipulations.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/relational_database_sketch.png)", "Driving Question": "How can data elements be stored so that relations between them can be expressed and expressive queries are enabled to retrieve required information effectively?"}', 'http://www.cloudcomputingpatterns.org/icons/relational_database_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('63de095c-653d-4946-b45e-fa5c42dca797', 'Virtual Networking', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/virtualNetworking', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/virtual_networking_icon.png)", "Intend": "Networking resources are virtualized to empower customers to configure networks, firewalls, and remote access using a self-service interface.", "Context": "Application components deployed on Elastic Infrastructures and Elastic Platforms rely on physical network hardware to communicate with each other and the outside world. On this networking layer, different customers shall be isolated from each.", "Solution": "Physical networking resources, such as networking interface cards, switches, routers etc. are abstracted to virtualized ones. These Virtual Networking resources may share the same physical networking resources. Configuration is handled by customers through self-service interfaces.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/virtual_networking_sketch.png)", "Driving Question": "How can network connectivity between IT resources hosted in a cloud be configured dynamically and on-demand?"}', 'http://www.cloudcomputingpatterns.org/icons/virtual_networking_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('cc10b7b1-5dce-454f-9356-fe62112a60ba', 'Blob Storage', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/blobStorage', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/blob_storage_icon.png)", "Intend": "Data is provided in form of large files that are made available in a file system-like fashion by Storage Offerings that provides elasticity.", "Context": "Distributed cloud applications often need to handle large data elements, also referred to as binary large objects (blob). Examples are virtual server images managed in an Elastic Infrastructure, pictures, or videos.", "Solution": "Data elements are organized in a folder hierarchy similar to a local file system. Each data element is given a unique identifier comprised of its location in the folder hierarchy and a file name. This unique identifier is passed to the storage offerings to retrieve a file over a network.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/blob_storage_sketch.png)", "Driving Question": "How can large files be stored, organized and made available over a network?"}', 'http://www.cloudcomputingpatterns.org/icons/blob_storage_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('e2abc560-342b-4521-bdaa-0804b71796cb', 'Private Cloud', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/privateCloud', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/private_cloud_icon.png)", "Intend": "IT resources are provided as a service exclusively to one customer in order to meet high requirements on privacy, security, and trust while enabling elastic use of a static resource pool as good as possible.", "Context": "Many factors, such as legal limitations, trust, and security regulations, motivate dedicated, company-internal hosting environments only accessible by employees and applications of a single company.", "Solution": "Cloud computing properties are enabled in a company-internal data center. Alternatively, the Private Cloud may be hosted exclusively in the data center of an external provider, then referred to as outsourced Private Cloud. Sometimes, [Public Cloud](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FpublicCloud) providers also offer means to create an isolated portion of their cloud made accessible to only one customer: a virtual Private Cloud.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/private_cloud_sketch.png)", "Driving Question": "How can the cloud properties - on demand self-service, broad network access, pay-per-use, resource pooling, and rapid elasticity - be provided in environments with high privacy, security and trust requirements?"}', 'http://www.cloudcomputingpatterns.org/icons/private_cloud_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('aadf394b-bab3-4511-8a74-8a236ba37b4f', 'Public Cloud', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/publicCloud', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/public_cloud_icon.png)", "Intend": "IT resources are provided as a service to a very large customer group in order to enable elastic use of a static resource pool.", "Context": "A provider offering IT resources according to [IaaS](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FinfrastructureAsAService%28iaas%29), [PaaS](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FplatformAsAService%28paas%29), or [SaaS](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FsoftwareAsAService%28saas%29) has to maintain physical data centers. IT resources, nevertheless, shall be made accessible dynamically.", "Solution": "The hosting environment is shared between many customers possibly reducing the costs for an individual customer. Leveraging economies of scale enables a dynamic use of resources, because workload peaks of some customers occur during times of low workload of other customers.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/public_cloud_sketch.png)", "Driving Question": "How can the cloud properties – on demand self-service, broad network access, pay-per-use, resource pooling, and rapid elasticity – be provided to a large customer group?"}', 'http://www.cloudcomputingpatterns.org/icons/public_cloud_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('e70f53cb-2b3d-493b-af58-64d404d1c5c3', 'Elastic Platform', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/elasticPlatform', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/elastic_platform_icon.png)", "Intend": "Middleware for the execution of custom applications, their communication, and data storage is offered via a self-service interface over a network.", "Context": "One of the fundamental cloud properties is the sharing of resources among a large number of customers to leverage economy of scale. Extending resource sharing between customers to the operating systems and middleware increases the beneficial effects of economies of scale as the utilization of these resources can be increased.", "Solution": "Application components of different customers are hosted on shared middleware provided and maintained by the provider. Customers may deploy custom application components to this middleware using a self-service interface. This unification enables resource sharing and an automation of certain management tasks on the provider side, for example, provisioning of applications, update management.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/elastic_platform_sketch.png)", "Driving Question": "How do Cloud Offerings providing Execution Environments behave and how should they be used in applications?"}', 'http://www.cloudcomputingpatterns.org/icons/elastic_platform_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('bdeb59ab-0e6c-4a5b-8cd5-1e7c38ce073e', 'Periodic Workload', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/periodicWorkload', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/periodic_workload_icon.png)", "Intend": "IT resources with a peaking utilization at reoccurring time intervals experience periodic workload.", "Context": "In our real lives, periodic tasks and routines are very common. For example, monthly paychecks, monthly telephone bills, yearly car checkups, weekly status reports, or the daily use of public transport during rush hour, all these tasks and routines occur in well-defined intervals.", "Solution": "From a customer perspective the cost-saving potential in scope of Periodic Workload is to use a provider with a pay-per-use pricing model allowing the decommissioning of resources during non-peak times.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/periodic_workload_sketch.png)", "Driving Question": "How can a periodically peaking utilization over time be characterized and how can applications experiencing this workload benefit from cloud computing?"}', 'http://www.cloudcomputingpatterns.org/icons/periodic_workload_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('fff9c453-2ed5-4354-a9f3-7ef43a52cdeb', 'Once-in-a-lifetime Workload', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/once-in-a-lifetimeWorkload', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/once_in_a_lifetime_workload_icon.png)", "Intend": "IT resources with an equal utilization over time disturbed by a strong peak occurring only once experience Once-in-a-lifetime Workload.", "Context": "As a special case of [Periodic Workload](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FperiodicWorkload), the peaks of periodic utilization can occur only once in a very long timeframe. Often, this peak is known in advance as it correlates to a certain event or task.", "Solution": "The elasticity of a cloud is used to obtain IT resources necessary. The provisioning and decommissioning of IT resources can often be realized as a manual task, because it is performed at a known point in time.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/once_in_a_lifetime_workload_sketch.png)", "Driving Question": "How can equal utilization with a one-time peak be characterized and how can applications experiencing this workload benefit from cloud computing?"}', 'http://www.cloudcomputingpatterns.org/icons/once_in_a_lifetime_workload_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('6882a00f-56bd-4b4d-8972-3ff29dac0ab7', 'Map Reduce', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/mapReduce', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/map_reduce_icon.png)", "Intend": "Large data sets to be processed are divided into smaller data chunks and distributed among processing application components. Individual results are later consolidated.", "Context": "Cloud applications often have to handle very large amounts of data, which have to be processed efficiently. As Distributed Applications are designed to scale out, data processing should be distributed among multiple application component instances in a similar means. Afterwards, results of these distributed components have to be consolidated.", "Solution": "A large data set to be processed is split up and mapped to multiple application components handling data processing. Data Processing Components simultaneously execute the query to be performed on the assigned data chunks. Afterwards, the individual results of all Processing Components are consolidated or reduced into one result data set. During this reduction, additional functions, such calculations of sums, average values etc. may be used.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/map_reduce_sketch.png)", "Driving Question": "How can the performance of complex processing of large data sets be increased through scaling out?"}', 'http://www.cloudcomputingpatterns.org/icons/map_reduce_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('cfd7186c-78ec-4ec2-a2a7-244d952839cf', 'Platform as a Service (PaaS)', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/platformAsAService(paas)', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/platform_as_a_service_icon.png)", "Intend": "Providers share IT resources providing an application hosting environment between customers to enable self-service, rapid elasticity, and pay-per-use pricing.", "Context": "If many customers require similar hosting environments for their applications, there are many redundant installations resulting in an inefficient use of the overall cloud.", "Solution": "A cloud provider offers managed operating systems and middleware. Management operations are handled by the provider, such as the elastic scaling and failure resiliency of hosted applications.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/platform_as_a_service_sketch.png)", "Driving Question": "How can custom applications of the same customer or different customers share an execution environment so that it can be used on-demand with a pay-per-use pricing model?"}', 'http://www.cloudcomputingpatterns.org/icons/platform_as_a_service_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('64f9163d-84df-455b-99f7-ffa93b88b43b', 'Eventual Consistency', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/eventualConsistency', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/eventual_consistency_icon.png)", "Intend": "If data is stored at different locations (replicas) to improve response time and avoid data loss in case of failures. Performance and the availability of data in case of network partitioning are enabled by ensuring data consistency eventually and not at all times.", "Context": "Using multiple replicas of data is vital to ensure resiliency of a storage offering towards resource failures. Keeping all these replicas in a consistent state, however, requires a significant overhead as multiple or all data replicas have to be accessed during read and write operations.", "Solution": "The consistency of data is relaxed. This reduces the number of replicas that have to be accessed during read and write operations. Data alterations are eventually transferred to all replicas by propagating them asynchronously over the connection network.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/eventual_consistency_sketch.png)", "Driving Question": "How can data be distributed among replicas with focus on increased availability and performance, while being resilient towards connectivity problems?"}', 'http://www.cloudcomputingpatterns.org/icons/eventual_consistency_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('7e0b759e-47c5-4a08-b916-760d6985a8b9', 'Community Cloud', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/communityCloud', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/community_cloud_icon.png)", "Intend": "IT resources are provided as a service to a group of customers trusting each other in order to enable collaborative elastic use of a static resource pool.", "Context": "Whenever companies collaborate, they commonly have to access shared applications and data to do business. While these companies trust each other due to established contracts etc., the handled data and application functionality may be very sensitive and critical to their business.", "Solution": "IT resources required by all collaborating partners are offered in a controlled environment accessible only by the community of companies that generally trust each other.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/community_cloud_sketch.png)", "Driving Question": "How can the cloud properties – on demand self-service, broad network access, pay-per-use, resource pooling, and rapid elasticity – be provided to exclusively to a group of customers forming a community of trust?"}', 'http://www.cloudcomputingpatterns.org/icons/community_cloud_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('bb7e0642-5af9-4b49-9e36-8e8be04ab26c', 'Node-based Availability', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/node-basedAvailability', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/node_based_availability_icon.png)", "Intend": "A cloud provider guarantees the availability of individual nodes, such as individual virtual servers, middleware components or hosted application components.", "Context": "A provider offers an Elastic Infrastructure or an Elastic Platform and needs a means to express the availability for the offerings from which the customer may then compute the availability of the hosted application. First, conditions are defined that have to be fulfilled by an available offering. Second, the timeframe needs to be expressed for which the provider assures this availability.", "Solution": "The provider assures availability for each hosted application component, which is defined to be available if it is reachable and performs its function as advertised, i.e., it provides correct results. This timeframe is often expressed as a percentage. An availability of 99.95%, thus, means that a hosted component will be available during 99.95% of the time it is hosted at the provider.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/node_based_availability_sketch.png)", "Driving Question": "How can providers express availability in a node-centric fashion, so that customers may estimate the availability of hosted applications?"}', 'http://www.cloudcomputingpatterns.org/icons/node_based_availability_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('7462b515-fcd0-40c1-af9b-f3724962dfee', 'Timeout-based Delivery', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/timeout-basedDelivery', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/timeout_based_delivery_icon.png)", "Intend": "Clients acknowledge message receptions to ensure that messages are received properly.", "Context": "In addition to ensuring that messages are not lost while they are traversing a Message-oriented Middleware it may, thus, also be required to assure that they are actually received by a client before they are deleted from a message queue.", "Solution": "To assure that a message is properly received, it is not deleted immediately after it has been read by a client, but is only marked as being invisible. In this state a message may not be read by another client. After a client has successfully read a message, it sends an acknowledgement to the message queue upon which reception the message is deleted.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/timeout_based_delivery_sketch.png)", "Driving Question": "How can it be ensured that messages are only deleted from a message queue if they have been received successfully at least once?"}', 'http://www.cloudcomputingpatterns.org/icons/timeout_based_delivery_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('2ac98a08-7a62-47a3-862e-c1e2511d48d3', 'Block Storage', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/blockStorage', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/block_storage_icon.png)", "Intend": "Centralized storage is integrated into servers as a local hard drive managed by the operating system to enable access to this storage via the local file system.", "Context": "Virtual and non-virtualized servers offered as Infrastructure as a Service (IaaS) can be managed significantly easier if they do not store any state information locally, i.e., on their (virtual) hard drives. This eases their provisioning, decommissioning, and failure handling.", "Solution": "Centralized storage is accessed by servers as if it was a local hard drive, also referred to as block device.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/block_storage_sketch.png)", "Driving Question": "How can central storage be accessed as a local drive by servers and hosted applications?"}', 'http://www.cloudcomputingpatterns.org/icons/block_storage_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('5802a300-483f-4340-839e-d2d6cb6633ef', 'Software as a Service (SaaS)', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/softwareAsAService(saas)', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/software_as_a_service_icon.png)", "Intend": "Providers share IT resources providing human-usable application software between customers to enable self-service, rapid elasticity, and pay-per-use pricing.", "Context": "Small and medium enterprises may not have the manpower and know-how to develop custom software applications. Other applications have become commodity and are used by many companies, for example, office suites, collaboration software, or communications software.", "Solution": "A provider offers a complete software application to customers who may use it on-demand via a self-service interface.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/software_as_a_service_sketch.png)", "Driving Question": "How can customers share a provider-supplied software application so that it can be used on-demand with a pay-per-use pricing model?"}', 'http://www.cloudcomputingpatterns.org/icons/software_as_a_service_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('bb81053e-a0af-4046-8455-6b31ac09fd80', 'Strict Consistency', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/strictConsistency', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/strict_consistency_icon.png)", "Intend": "Data is stored at different locations (replicas) to improve response time and to avoid data loss in case of failures while consistency of replicas is ensured at all times.", "Context": "To ensure failure tolerance, a storage offering duplicates data among multiple replicas. These replicas store the same set of data, so in case any of these replicas is lost, data may still be obtained and recovered from the other replicas.", "Solution": "Data is duplicated among several replicas to increase availability. A subset of data replicas is accessed by read and write operations. The ratio of the number of replicas accessed during read (r) and write (w) operations guarantees consistency: n < r + w", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/strict_consistency_sketch.png)", "Driving Question": "How can data be distributed among replicas to increase availability, while ensuring data consistency at all times?"}', 'http://www.cloudcomputingpatterns.org/icons/strict_consistency_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('15367d15-12e2-495c-8311-2dadbf4da398', 'Unpredictable Workload', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/unpredictableWorkload', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/unpredictable_workload_icon.png)", "Intend": "IT resources with a random and unforeseeable utilization over time experience unpredictable workload.", "Context": "Random workloads are a generalization of [Periodic Workloads](/patternlanguages/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns/https%25253A%25252F%25252Fpatternpedia.org%25252FpatternLanguages%25252FcloudComputingPatterns%25252FperiodicWorkload) as they require elasticity but are not predictable. Such workloads occur quite often in the real world.", "Solution": "Unplanned provisioning and decommissioning of IT resources is required. The necessary provisioning and decommissioning of IT resources is, therefore, automated to align the resource numbers to changing workload.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/unpredictable_workload_sketch.png)", "Driving Question": "How can random and unforeseeable utilization be characterized and how can applications experiencing this workload benefit from cloud computing?"}', null, '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('e5f8faa2-5d40-4d36-8f76-4fcaee493bb2', 'Message-oriented Middleware', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/message-orientedMiddleware', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/message_oriented_middleware_icon.png)", "Intend": "Asynchronous message-based communication is provided while hiding complexity resulting from addressing, routing, or data formats from communication partners to make interaction robust and flexible.", "Context": "The application components of a Distributed Application are hosted on multiple cloud resources and have to exchange information with each other. Often, the integration with other cloud applications and non-cloud applications is also required.", "Solution": "Communication partners exchange information asynchronously using messages. The message-oriented middleware handles the complexity of addressing, availability of communication partners and message format transformation.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/message_oriented_middleware_sketch.png)", "Driving Question": "How can communication partners exchange information asynchronously with a communication partner?"}', 'http://www.cloudcomputingpatterns.org/icons/message_oriented_middleware_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('c56e0cb7-d5ed-4168-9b28-850c83b91b84', 'Continuously Changing Workload', 'https://patternpedia.org/patternLanguages/cloudComputingPatterns/continuouslyChangingWorkload', '{"Icon": "![](http://www.cloudcomputingpatterns.org/icons/continuously_changing_workload_icon.png)", "Intend": "IT resources with a utilization that grows or shrinks constantly over time experience Continuously Changing Workload.", "Context": "Many applications experience a long term change in workload.", "Solution": "Continuously Changing Workload is characterized by an ongoing continuous growth or decline of the utilization. Elasticity of clouds enables applications experiencing Continuously Changing Workload to provision or decommission resources with the same rate as the workload changes.", "Solution Sketch": "![](http://www.cloudcomputingpatterns.org/sketches/continuously_changing_workload_sketch.png)", "Driving Question": "How can a continuous growth or decline in utilization be characterized and how can applications experiencing this workload benefit from cloud computing?"}', 'http://www.cloudcomputingpatterns.org/icons/continuously_changing_workload_icon.png', '54ebf6d5-e9df-44c6-ae31-f84e9bfb2d9f');
INSERT INTO public.pattern (id, name, uri, content, icon_url, pattern_language_id) VALUES ('4c40e4af-58f3-42ac-a28a-9cc7cb0335e0', 'Creating Entanglement', 'https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/creatingEntanglement', '{"Next": "Enter your input for this section here.", "Alias": "", "Intend": "A strong correlation between qbits of a quantum register is often needed in\norder to enable algorithms that offer a speedup compared to classical algorithms.", "Context": "Entanglement is one of the causes of the power of quantum algorithms (see\n[5], although entanglement is not a necessity [3]). A quantum algorithm showing\nexponential speedup requires entanglement [17]. Thus, after initialization of a\nquantum register it should often be entangled for its further processing.", "Solution": "Several approaches can be taken to create an entangled state. For example,\nassume a binary function $f : {\\{0,1\\}}^n \\mapsto {\\{0,1\\}}^m$. and the corresponding unitary operation\n$$U_f : {\\{0,1\\}}^{n+m} \\mapsto {\\{0,1\\}}^{n+m}, \\ U_f : {\\{0,1\\}}^{n+m} \\mapsto {\\{0,1\\}}^{n+m}$$\nHow can an equally weighted superposition of all possible states of the\nqbits of a quantum register be created? ", "Known Uses": "Enter your input for this section here.", "Driving Question": "How can an entangled state be created?"}', '', '6f6a891f-df78-49b6-83cb-2b95c535e1b1');

